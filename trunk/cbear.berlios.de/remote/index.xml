<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../cms/html.xsl"?>
<section xmlns="http://cbear.berlios.de/cms" name="Remote API">
The system should allow the user to create a programming interface of a 
particular device type for high level programming languages such as Java, C#, 
C++. This also should provide a safe way to communicate with the devices by using 
the defined interfaces. The comunication is actually a Remote Procedure Call 
(<a href="Remote procedure call" type="wikipedia">RPC</a>).
	<section name="Platforms">
Different operation systems and platforms have different ways to define 
programming interfaces.
		<section name="Windows">
The main program communication system on Windows is <a href=
"Component Object Model" type="wikipedia">COM</a> and its 
descendants such as COM+, DCOM, ActiveX. Also <a href=
"http://en.wikipedia.org/wiki/.NET_Framework">.NET</a> can easily interface to 
COM interfaces. Most programming languges and systems on Windows can use COM.
			<section name="Interface Definition Language (IDL)">
COM has its own <a href="Interface definition language" type="wikipedia">IDL</a> 
to define interfaces. It is based on DCE IDL but has a lot of Microsoft specific 
features. The language is hard to use. Other names are MIDL (Microsoft IDL) and 
ODL (more strict subset).
			</section>
			<section name="Binary Representation">
TLB is a binary representation of COM interfaces.
			</section>
			<section name="Code Generators">
Microsoft provides an IDL compiler MIDL. MIDL generates a TLB file and pure C 
code (not modern C++) from a COM IDL file. The C code is difficult and unsafe to 
use. Also, it is genererated for Visual C only. The MIDL compiler is not 
supported properly any more because the main priority of Microsoft is .NET.
			</section>
		</section>
		<section name="UNIX, LINUX, Free BSD and MacOS X">
<a href="DCE/RPC" type="wikipedia"/> and <a href="CORBA" type="wikipedia"/>.
			<section name="Interface Definition Language">
The CORBA also has its own IDL. However, it is not COM IDL and not DCE IDL.
			</section>
		</section>
		<section name=".NET">
.NET has its own Run Time Type Information (<a href="RTTI" type="wikipedia"/>). 
Since RTTI contains full 
information about types, it contains interface definitions as well. However, 
.NET can easy understand COM TLB files and use COM servers and DLL libraries.
		</section>		
		<section name="Java">
Can use CORBA, COM (on Windows) and also its own systems since Java has its own 
RTTI such as JavaIDL.
		</section>
		<section name="XPCOM">
<a href="XPCOM" type="XPCOM"/> is Cross Platform COM 
used in Mozilla browsers. They have their own IDL (XPIDL) which is close to 
CORBA IDL. The main problem with that, it has GPL like license.
		</section>
	</section>
	<section name="Interface Definition">
		<section name="Structure">
The best way to represent interface definition structure is to use XML as the
most clear way to structure any data. Lets call it <b>API.XML</b>. Since it is 
based on XML, it is very easy to write a proper converter to any other system or
language without writting complicated parsers or binary serializators. In most 
cases, XSLT can cover all required convertions. XSLT is also the best way to 
represent interface definition in the most popular web browsers such as Microsoft 
Internet Explorer and Mozilla Firefox. No additional tools are required to see 
interface definition structure.
		</section>
		<section name="Language">
			<section name="Alternatives">
				<p>
It is possible to use the API.XML as an <b>IDL</b> but it is not the easiest way 
to define interfaces. The best way is to use a specific language. DCE IDL and 
COM IDL are too specific and not user friendly so they can not be a main IDL 
language. CORBA IDL and XPIDL are much better as an IDL language but it is not 
clear about all its possibilities.
				</p>
				<p>
Currently, we use the API.XML.
				</p>
			</section>
			<section name="Compilers">
Only one requirement: the compiler has to be able to convert IDL into the 
API.XML.
			</section>
		</section>
		<section name="GUI and Wizards">
One requirement: they should work with the API.XML.
		</section>
	</section>
	<section name="Implemented Generators">
		<section name="API.XML to ODL.XML / ODL">
<b>ODL.XML</b> is an XML structure of COM IDL. <b>ODL</b> is a strict COM IDL. 
MIDL can generate TLB, H and IID.C files by using ODL.
		</section>
		<section name="ODL.XML to CPP.XML / HPP">
<b>CPP.XML</b> is an XML structute of a C++ module. Can be used to write either 
a C++ COM server or a client. <b>HPP</b> is a C++ header file.
		</section>
		<section name="ODL.XML to CS.XML / CS">
<b>CS.XML</b> is an XML structute of a C# module. Can be used only to write a
C# COM server. C# COM clients must use COM TLB. <b>CS</b> is a C# file.
		</section>
		<section name="API.XML to XHTML">
<b>XHTML</b> based documentation. XHTML is an XML based HTML, a W3C standard.
		</section>
	</section>
	<section name="Required Work">
Firstly, the main requirement is to define an RPC. This defines how high level
function calls will be serialized. There are a lot of different RPC standards 
such as DCE RPC, <a href="MSRPC" type="wikipedia"/>, 
<a href="XML RPC" type="wikipedia"/> and others. Because 
our devices have limited resources, we can define our own RPC, and not only one. 
It can also depends on a particular device type and its resources. Different 
generators are required for different RPC.
		<section name="Generators">
			<section name="ODL.XML to RPCNAME.CPP">
<b>RPCNAME.CPP</b> is a C++ module which can serialize and desirialize 
specific interface function calls to a simple flat message such as an array of 
bytes by using RPCNAME agreements.
			</section>
			<section name="ODL.XML to RPCNAME.C">
<b>RPCNAME.C</b> is a C module which can serialize and desirialize specific 
interface function calls to a simple flat message such as an array of bytes by 
using RPCNAME agreements.
			</section>
		</section>
	</section>
	<section name="Device RPC, version 1.0">
		<section name="Interfaces And Function Identifiers">
One module has only one class which can contain multiple interfaces. An 
interface pointer is an unsigned integer 8 bits (uint8). A function 
identifier is uint8 that is a sum of its interface pointer and a function 
offset.
		</section>
		<section name="Service functions">
			<section name="Function # 0">
<pre><![CDATA[void function0([out] uint8 number);]]></pre>
It returns a number of interfaces.
			</section>
			<section name="Function # 1">
<pre><![CDATA[void function1([in] uint8 number, [out] uuid descriptor, [out] uint8 pointer);]]></pre>
It returns an interface descriptor. <em>Number</em> is an interface number.
The interface decriptor contains UUID (16 bytes) and an interface pointer (1 byte).
			</section>
		</section>
		<section name="IUnknown">
No AddRef, no Release, no QueryInterface.
		</section>
		<section name="Functions">
All functions and properties have to use the <em>__cdecl</em> call convertion.
		</section>
		<section name="Function Parameters">
No [IN, OUT] parameters. A parameter can be [IN] or [OUT] only.
		</section>
		<section name="Exceptions">
No exceptions.
		</section>
		<section name="Header">
<pre><![CDATA[struct header
{
	uint8 in_size_hi; 
	uint8 in_size; // A size of all [IN] parameters.
	uint8 out_size_hi; 
	uint8 out_size; // A size of all [OUT] parameters.
	uint8 command_hi;
	uint8 command; // Command.
};]]></pre>
		</section>
		<section name="Primitive Types">
Serialized in <a href="big endian" type="wikipedia"/>.
			<ul>
				<li>
					<b>uint8</b> - an 8-bits unsigned integer.
				</li>
				<li>
					<b>int8</b> - an 8-bits signed integer.
				</li>
				<li>
					<b>uint16</b> - a 16-bits unsigned integer.
				</li>
				<li>
					<b>int16</b> - a 16-bits signed integer.
				</li>
				<li>
					<b>uint32</b> - a 32-bits unsigned integer.
				</li>
				<li>
					<b>int32</b> - a 32-bits signed integer.
				</li>
			</ul>
		</section>
		<section name="Enumerations">
			The size of an enumeration depends on possible values.
		</section>
		<section name="Structures">
			Serialized in the order of its fields. Aligment is one byte.
		</section>
		<section name="Fixed Arrays">
			Serialized in the order of their items.
		</section>
	</section>		
	<section name="C++ Implementation">
<pre><![CDATA[template<class T>
class interface_
{
};]]></pre>
The <em>T</em> type must be derived from <em>interface&lt;T&gt;</em> and 
implement those member functions:
<pre><![CDATA[windows::com::hresult query_interface(const windows::com::uuid &U, void **P);
windows::com::ulong add_ref();
windows::com::ulong release();
windows::com::hresult universal(std::size_t N, char *P);]]></pre>
	</section>
</section>
