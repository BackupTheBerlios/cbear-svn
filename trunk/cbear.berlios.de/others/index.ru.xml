<?xml version="1.0" encoding="utf-8"?>
<!--
The MIT License

Copyright (c) 2005 C Bear (http://cbear.berlios.de)

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<?xml-stylesheet type="text/xsl" href="../project/html.xsl"?>
<section 
	xmlns="http://cbear.berlios.de/project" name="С++ Object, комментарии">
	<section name="Subversion">
Для будущих возможных версий и ответвлений, лучше сделать директорию trunk у 
основания. Т.е. вместо:
<a href="https://svn.sourceforge.net/svnroot/cpp-object/">https://svn.sourceforge.net/svnroot/cpp-object/</a>
основной директорией сделать 
<a href="https://svn.sourceforge.net/svnroot/cpp-object/trunk">https://svn.sourceforge.net/svnroot/cpp-object/trunk</a>
(broken link). Вполне возможно, что кроме <em>trunk</em>, позже появятся 
директории <em>stable</em>, <em>v.3.0</em> и т.п. Так как, разветвления в 
Subversion делаются только 
<a href="http://svnbook.red-bean.com/en/1.1/ch04s02.html#svn-ch-4-sect-2.3">через директории</a>,
что меня вполне устраивает.
	</section>
	<section name="Организация директорий">
Я предпочитаю делать разделение директорий по 
подпроектам, а не по типам файлов. Т.е. вместо такой организации:
<pre>
inc\a.hpp
   \b.hpp
   \supbproject\c.hpp
doc\a.html
   \b.html
   \subproject\c.html
test\a.cpp
    \b.cpp
    \subproject\c.cpp
</pre>
сделать такую:
<pre>
a.hpp
a.html
a.test.cpp
b.hpp
b.html
b.test.cpp
suproject\c.hpp
         \c.html
         \c.test.cpp
</pre>
В такой структуре гораздо легче выделять/копировать/переносить подпроекты.
Например: переименовать, перенести, а тем более удалить устаревший проект 
subproject не составляет труда. Делаем одно действие с директорией subproject.
При этом, никто не запрещает сделать BATCH файл который будет просто копировать 
из всех директорий, например, только HTML файлы в отдельную директорию (если 
нужен пакет только с документацией на все подпроекты).
	</section>
	<section name="Расширения файлов">
		<ul>
			<li>
Заголовочные <em>С++</em> файлы имеют расширение <em>hpp</em>.
			</li>
			<li>
Заголовочные <em>C</em> файлы имеют расширение <em>h</em>. Если заголовочный 
файл предназначен и для <em>C</em> и для <em>C++</em>, то он имеет расширение
<em>h</em>.
			</li>
		</ul>
	</section>
	<section name="COM, C и C++">
То что я бы хотел видеть C++ Object. Есть необходимость делать связь с COM 
объектами. В основном, COM интерфейсы имеют C интерфейс. Проблемы связанные с C
интерфейсами:
		<ul>
			<li>
Передача параметров по указателю, а не по ссылке (за редким исключением).
			</li>				
			<li>
Возможна передача указателей на неинициализированные объекты, т.е. [OUT] 
аргументы.
			</li>
			<li>
Использются голые, не обернутые и не автономные структуры и типы. Например:
				<ul>
					<li>
Указатель на интерфейс: Interface *, вместо 
<em>class pointer&lt;Interface&gt;</em>.
					</li>
					<li>
Строка: WCHAR *, вместо <em>class bstr</em>.
					</li>
					<li>
Динамические массивы: SAFEARRAY *, вместо 
<em>class safearray&lt;ValueType&gt;</em>.
					</li>
				</ul>
			</li>
			<li>
Использование HRESULT как признак ошибки, вместо С++ исключений.
			</li>
		</ul>
Практически все эти проблемы можно отнести к любой C библиотеке.
		<section name="Автономные объекты">
Объекты при создании, уничтожении, присваивании которых не нужно вызывать 
дополнительных функций, таких как AddRef, Release и т.п. Все действия происходят
автоматически в конструкторах, операторах присваивания и деструкторах. 
		</section>
		<section name="Самодостаточность автономных объектов">
Типы автономных объектов должны обладать всеми необходимыми функциями и 
метафункциями по конвертации и доступу к их C аналогам. Например:
<pre><![CDATA[class object
{
public:
	typedef ... c_t; // С тип.
	typedef ... c_in_t; // Тип C [IN] параметра.
	typedef ... c_in_out_t; // Тип C [IN, OUT] параметра.
	typedef ... c_out_t; //< Тип C [OUT] параметра.

	// Функция преобразующая константый объект в C [IN] параметр.
	c_in_t c_in() const;
	// Функция преобразующая объект в C [IN, OUT] параметр.
	c_in_out_t c_in_out() const;
	// Функция преобразующая объект в C [OUT] параметр.
	c_out_t c_out() const;
	
	// Статическая функция возвращающая ссылку на константный объект по C [IN] 
	// параметру.
	static const object &cpp_in(const c_in_t &X);
	// Статическая функция возвращающая ссылку на объект по C [IN, OUT] 
	// параметру.
	static object &cpp_in_out(const c_in_out_t &X);	
	// Статическая функция возвращающая ссылку на объект по C [OUT] параметру.
	static object &cpp_out(const c_out_t &X);
};]]></pre>
		</section>		
		<section name="Неавтономные объекты">
Так как, некоторые объекты не будут оборачиватся в автономные оболочки, например 
int. То функции преобразования и свойства типов должны быть вынесенны в 
отдельные типы. Общий случай:
<pre><![CDATA[// С тип.
template<class T>
class c_t; 

// Тип C [IN] параметра.
template<class T>
class c_in_t;
	
// Тип C [IN, OUT] параметра.
template<class T>
class c_in_out_t;

// Тип C [OUT] параметра.
template<class T>
class c_out_t;

// Функция преобразующая константый объект в C [IN] параметр.
template<class T>
typename c_in_t<T>::type c_in(const T &);

// Функция преобразующая объект в C [IN, OUT] параметр.
template<class T>
typename c_in_out_t<T>::type c_in_out(T &);

// Функция преобразующая объект в C [OUT] параметр.
template<class T>
typename c_out_t<T>::type c_out(T &);
	
// Функция возвращающая ссылку на константный объект по C [IN] параметру.
template<class T>
const T &cpp_in(const typename c_in_t<T>::type &X);

// Функция возвращающая ссылку на объект по C [IN, OUT] параметру.
template<class T>
object &cpp_in_out(const typename c_in_out_t<T>::type &X);

// Функция возвращающая ссылку на объект по C [OUT] параметру.
template<class T>
object &cpp_out(const typename c_out_t<T>::type &X);]]></pre>
		</section>
	</section>
</section>
