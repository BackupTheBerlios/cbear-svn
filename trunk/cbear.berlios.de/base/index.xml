<?xml version="1.0"?>
<!--
The MIT License

Copyright (c) 2005 C Bear (http://cbear.berlios.de)

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<?xml-stylesheet type="text/xsl" href="../docbook/html.xsl"?>
<section xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Basic Types</title>
	<para>
Namespace <emphasis>cbear_berlios_de::base</emphasis>.
	</para>
	<section>
		<title>Integer Types</title>
		<para>
Header <filename>integer.hpp</filename>. Test program 
<filename>integer.hpp.test.cpp</filename>.
		</para>
		<section>
			<title>is_integer Meta Function</title>
			<para>
Returns <emphasis>true</emphasis> if the given type is an integer type.
			</para>
<programlisting role="cpp"><![CDATA[template<class Type> 
struct is_integer
{ 
	typedef ... type;
	static const bool value;
};]]></programlisting>
		</section>
		<section>
			<title>is_signed Meta Function</title>
			<para>
Returns <emphasis>true</emphasis> if the given type is signed integer type.
			</para>
<programlisting role="cpp"><![CDATA[template<class Type>
struct is_signed
{
	typedef ... type;
	static const bool value;
};]]></programlisting>
		</section>
		<section>
			<title>Integer Type Selection (int_t, uint_t)</title>
			<para>
These functions are based on <ulink url=
"http://www.boost.org/libs/integer/integer.htm"
>Boost, Integer Type Selection Templates</ulink>.
			</para>
			<para>
<emphasis>int_t</emphasis> returns the built-in signed integral type with the 
given number of bits, including the sign bit.
			</para>
<programlisting role="cpp"><![CDATA[template<std::size_t Bits>
struct int_t
{
	typedef ... type;
};]]></programlisting>
			<para>
<emphasis>uint_t</emphasis> returns the built-in unsigned integral type with the
given number of bits.
			</para>
<programlisting role="cpp"><![CDATA[template<std::size_t Bits>
struct uint_t
{
	typedef ... type;
};]]></programlisting>
			<para>
See also <ulink url="http://www.boost.org/libs/integer/integer.htm"
>Boost, Integer Type Selection Templates</ulink> and <ulink 
url="http://www.boost.org/libs/integer/cstdint.htm"
>Boost, Header boost/cstdint.hpp</ulink>.
			</para>
		</section>
		<section>
			<title>Convertions (make_signed, make_unsigned)</title>
			<para>
<emphasis>make_signed</emphasis> returns the built-in signed integral type with 
the same number of bits, including the sign bit, as the given type has.
			</para>
<programlisting role="cpp"><![CDATA[template<class Type>
struct make_signed
{
	typedef ... type;
};]]></programlisting>
			<para>
<emphasis>make_unsigned</emphasis> returns the built-in unsigned integral type 
with the same number of bits as the given type has.
			</para>
<programlisting><![CDATA[template<class Type>
struct make_unsigned
{
	typedef ... type;
};]]></programlisting>
		</section>
		<section>
			<title>Integer Parts</title>
<programlisting role="cpp"><![CDATA[template<class Type>
struct half
{
	typedef ... type;
}

template<class Type>
typename half<Type>::type &low(Type &X);

template<class Type>
typename half<Type>::type low(const Type &X);

template<class Type>
typename half<Type>::type &high(Type &X);

template<class Type>
typename half<Type>::type high(const Type &X);

template<class Half>
struct compose_result
{
	typedef ... type;
};

template<class Half>
typename compose_result<Half>::type compose(const Half &High, const Half &Low);]]></programlisting>
		</section>
	</section>
	<xi:include href="singleton.xml"/>
</section>
