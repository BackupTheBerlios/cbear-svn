<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../cms/html.xsl"?>
<section xmlns="http://cbear.berlios.de/cms" name="Basic Types">
	
	<p>
Namespace <em>cbear_berlios_de::base</em>.
	</p>
	<section name="Integer Types">
		
		<p>
Header <a href="integer.hpp"/>. Test program 
<a href="integer.hpp.test.cpp"/>.
		</p>
		<section name="is_integer Meta Function">
			
			<p>
Returns <em>true</em> if the given type is an integer type.
			</p>
<pre>template&lt;class Type&gt; 
struct is_integer
{ 
	typedef ... type;
	static const bool value;
};</pre>
		</section>
		<section name="is_signed Meta Function">
			
			<p>
Returns <em>true</em> if the given type is signed integer type.
			</p>
<pre>template&lt;class Type&gt;
struct is_signed
{
	typedef ... type;
	static const bool value;
};</pre>
		</section>
		<section name="Integer Type Selection (int_t, uint_t)">
			
			<p>
These functions are based on <a href="http://www.boost.org/libs/integer/integer.htm">Boost, Integer Type Selection Templates</a>.
			</p>
			<p>
<em>int_t</em> returns the built-in signed integral type with the 
given number of bits, including the sign bit.
			</p>
<pre>template&lt;std::size_t Bits&gt;
struct int_t
{
	typedef ... type;
};</pre>
			<p>
<em>uint_t</em> returns the built-in unsigned integral type with the
given number of bits.
			</p>
<pre>template&lt;std::size_t Bits&gt;
struct uint_t
{
	typedef ... type;
};</pre>
			<p>
See also <a href="http://www.boost.org/libs/integer/integer.htm">Boost, Integer Type Selection Templates</a> and <a href="http://www.boost.org/libs/integer/cstdint.htm">Boost, Header boost/cstdint.hpp</a>.
			</p>
		</section>
		<section name="Convertions (make_signed, make_unsigned)">
			
			<p>
<em>make_signed</em> returns the built-in signed integral type with 
the same number of bits, including the sign bit, as the given type has.
			</p>
<pre>template&lt;class Type&gt;
struct make_signed
{
	typedef ... type;
};</pre>
			<p>
<em>make_unsigned</em> returns the built-in unsigned integral type 
with the same number of bits as the given type has.
			</p>
<pre>template&lt;class Type&gt;
struct make_unsigned
{
	typedef ... type;
};</pre>
		</section>
		<section name="Integer Parts">
			
<pre>template&lt;class Type&gt;
struct half
{
	typedef ... type;
}

template&lt;class Type&gt;
typename half&lt;Type&gt;::type &amp;low(Type &amp;X);

template&lt;class Type&gt;
typename half&lt;Type&gt;::type low(const Type &amp;X);

template&lt;class Type&gt;
typename half&lt;Type&gt;::type &amp;high(Type &amp;X);

template&lt;class Type&gt;
typename half&lt;Type&gt;::type high(const Type &amp;X);

template&lt;class Half&gt;
struct compose_result
{
	typedef ... type;
};

template&lt;class Half&gt;
typename compose_result&lt;Half&gt;::type compose(const Half &amp;High, const Half &amp;Low);</pre>
		</section>
	</section>
	<section name="Singleton">
		<p>
Namespace <em>cbear_berlios_de::base</em>.
		</p>
		<p>
<a href="singleton.hpp"/>.
		</p>
		<section name="Requirements">		
			<ul>
				<li>
					<p>
Thread safe =&gt; use <em>thread::static_mutex</em> or 
<em>atomic::static_wrap</em>.
					</p>
				</li>
				<li>
					<p>
Even two different static variables in a function body are not thread safe.
					</p>
				</li>
			</ul>
		</section>
	</section>
</section>