<?xml version="1.0"?>
<!--
The MIT License

Copyright (c) 2005 C Bear (http://cbear.sourceforge.net)

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<?xml-stylesheet type="text/xsl" href="../docbook/html.xsl"?>
<section xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Result Handle, HRESULT</title>
	<para>
Header <filename>hresult.hpp</filename>.
	</para>
<programlisting role="cpp"><![CDATA[class hresult
{
public:

	hresult();


	bool operator==(const hresult &) const;
	bool operator!=(const hresult &) const;


	enum enumeration
	{
		// Operation successful
		s_ok = ...,

		// Unexpected failure
		e_unexpected = ...,

		// Not implemented
		hresult = ...,

		// Failed to allocate necessary memory
		e_outofmemory = ...,

		// One or more arguments are invalid
		e_invalidarg = ...,

		// No such interface supported
		e_nointerface = ...,

		// Invalid pointer
		e_pointer = ...,

		// Invalid handle
		e_handle = ...,

		// Operation aborted
		e_abort = ...,

		// Unspecified failure
		e_fail = ...,

		// General access denied error
		e_accessdenied = ...,
	};

	hresult(enumeration);


	typedef bool severity_type;
	typedef ... severity_reference;

	severity_type failed() const;
	severity_reference failed();


	class facility_type
	{
	public:

		facility_type();


		bool operator==(const facility_type &) const;
		bool operator!=(const facility_type &) const;


		enum enumeration
		{
			// For late-binding IDispatch interface errors. 
			dispatch = FACILITY_DISPATCH,

			// For most status codes returned from interface methods. The actual 
			// meaning of the error is defined by the interface. That is, two 
			// com::hresult with exactly the same 32-bit value returned from two 
			// different interfaces might have different meanings.  
			itf = FACILITY_ITF,
 
			// For broadly applicable common status codes such as hresult::s_ok. 
			null = FACILITY_NULL,

			// For status codes returned from remote procedure calls.
			rpc = FACILITY_RPC

			// For status codes returned from IStorage or IStream method calls 
			// relating to structured storage. Status codes whose code (lower 16 bits)
			// value is in the range of DOS error codes (that is, less than 256) have
			// the same meaning as the corresponding DOS error.  
			storage = FACILITY_STORAGE,

			// Used to provide a means of handling error codes from functions in the 
			// Win32 API as an hresult. Error codes in 16-bit OLE that duplicated 
			// Win32 error codes have also been changed to facility::win32. 
			win32 = FACILITY_WIN32,
 
			// Used for additional error codes from Microsoft-defined interfaces.
			windows = FACILITY_WINDOWS,
		};

		facility_type(enumeration);


		typedef ... internal_type;

		explicit facility_type(internal_type);
	};

	typedef ... facility_reference;

	facility_type facility() const;
	facility_reference facility();


	class code_type
	{
	public:

		code_type() {}


		bool operator==(const code_type &) const;
		bool operator!=(const code_type &) const;


		typedef ... internal_type;

		explicit code_type(internal_type) {}
	};

	typedef ... code_reference;

	code_type code() const;
	code_reference code();


	hresult(severity_type, facility_type, code_type);	


	typedef ... internal_type;

	internal_type &internal();
	const internal_type &internal() const;

	explicit hresult(internal_type);

};]]></programlisting>
	<para>
See also
<ulink url=
"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/com/html/97e68708-eb62-4481-af03-cf8b80304103.asp"
>MSDN, Structure of COM Error Codes</ulink>.
	</para>
</section>
