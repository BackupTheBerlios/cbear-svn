<?xml version="1.0"?>
<schema 
	xmlns="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://cbear.berlios.de/cpp"
	xmlns:cpp="http://cbear.berlios.de/cpp"
	elementFormDefault="qualified"
	attributeFormDefault="unqualified">

	<!-- 
		A unit contains a header file (.hpp) and a code file (.cpp).	
		A unit has a name.
	-->
	<element name="unit">
		<complexType>
			<sequence>
				<element ref="cpp:header"/>
				<element ref="cpp:code" minOccurs="0"/>
			</sequence>
			<attribute name="id" type="cpp:id"/>
		</complexType>
	</element>

	<element name="header" type="cpp:content"/>
	<element name="code" type="cpp:content"/>

	<!-- A content contains namespaces, templates and classes. -->
	<complexType name="content">
		<sequence>
			<element ref="cpp:include" minOccurs="0" maxOccurs="unbounded"/>
			<choice minOccurs="0" maxOccurs="unbounded">
				<element ref="cpp:namespace"/>
				<element ref="cpp:class"/>
				<element ref="cpp:template"/>
				<element ref="cpp:typedef"/>
				<element ref="cpp:enum"/>
			</choice>
		</sequence>
	</complexType>

	<!-- An include. -->
	<element name="include">
		<complexType>
			<attribute name="href" type="cpp:href"/>
		</complexType>
	</element>

	<!-- href. -->
	<simpleType name="href">
		<restriction base="string"/>
	</simpleType>

	<!-- 
		A namespace contains everything a content has. 
		A namespace has a name.

			namespace Example
			{
				...
			}
	-->
	<element name="namespace">
		<complexType>
			<choice minOccurs="0" maxOccurs="unbounded">
				<element ref="cpp:namespace"/>
				<element ref="cpp:class"/>
				<element ref="cpp:template"/>
				<element ref="cpp:typedef"/>
				<element ref="cpp:enum"/>
			</choice>
			<attribute name="id" type="cpp:id"/>
		</complexType>
	</element>

	<!--
		A template contains parameters and a class.

			template<class Id1, class Id2>
			class Id
			{
				...
			};
	-->
	<element name="template">
		<complexType>
			<sequence>
				<element ref="cpp:id" minOccurs="0" maxOccurs="unbounded"/>
				<choice>
					<element ref="cpp:class"/>
					<element ref="cpp:method"/>
				</choice>
			</sequence>
		</complexType>
	</element>

	<!--
		A class has a type name, references on parent types and methods.
	
			class Name1::Name2<Name3, Name4<Name5::Name6 > >::Name7: public Parent1
			{
				...
			};
	-->
	<element name="class">
		<complexType>
			<sequence>
				<element ref="cpp:id.ref"/>
				<element ref="cpp:access" minOccurs="0" maxOccurs="unbounded"/>
			</sequence>
		</complexType>
	</element>

	<!-- An access. public/private/protected. -->
	<element name="access">
		<complexType>
			<choice minOccurs="0" maxOccurs="unbounded">
				<element ref="cpp:id.ref"/>
				<element ref="cpp:method"/>
				<element ref="cpp:class"/>
				<element ref="cpp:template"/>
				<element ref="cpp:typedef"/>
				<element ref="cpp:enum"/>
			</choice>		
			<attribute name="access" type="cpp:access"/>
		</complexType>	
	</element>

	<!-- An access: public, private or protected. -->
	<simpleType name="access">
		<restriction base="string">
			<enumeration value="public"/>
			<enumeration value="private"/>
			<enumeration value="protected"/>
		</restriction>
	</simpleType>

	<!-- A method 

				virtual Name1::Name2 Method(Name1, Name2<Name3>::Name4) const = 0;
	-->
	<element name="method">
		<complexType>
			<sequence>
				<element ref="cpp:explicit" minOccurs="0"/>
				<element ref="cpp:static" minOccurs="0"/>
				<element ref="cpp:virtual" minOccurs="0"/>
				<element ref="cpp:id.ref" minOccurs="0"/>
				<element ref="cpp:stdcall" minOccurs="0"/>
				<element ref="cpp:parameter" minOccurs="0" maxOccurs="unbounded"/>
				<element ref="cpp:const" minOccurs="0"/>
				<element ref="cpp:abstract" minOccurs="0"/>
				<sequence minOccurs="0">
					<element ref="cpp:ctor" minOccurs="0" maxOccurs="unbounded"/>
					<element ref="cpp:body"/>
				</sequence>
			</sequence>
			<attribute name="id" type="cpp:id"/>
		</complexType>
	</element>

	<!-- A virtual option. -->
	<element name="explicit"/>

	<!-- A virtual option. -->
	<element name="static"/>
	
	<!-- A virtual option. -->
	<element name="virtual"/>

	<!-- A stdcall. -->
	<element name="stdcall"/>

	<!-- A virtual option. -->
	<element name="abstract"/>

	<!-- A method parameter -->
	<element name="parameter">
		<complexType>
			<sequence>
				<element ref="cpp:id.ref"/>
			</sequence>
			<attribute name="id" type="cpp:id" use="optional"/>
		</complexType>
	</element>

	<!-- A method body -->
	<element name="body">
		<complexType>
			<choice minOccurs="0" maxOccurs="unbounded">
				<element ref="cpp:id.ref"/>
				<element ref="cpp:try"/>
			</choice>
		</complexType>
	</element>

	<!-- try -->
	<element name="try">
		<complexType>
			<sequence>
				<element ref="cpp:body"/>
				<element ref="cpp:catch" minOccurs="1" maxOccurs="unbounded"/>
			</sequence>
		</complexType>
	</element>

	<!-- catch -->
	<element name="catch">
		<complexType>
			<sequence>
				<element ref="cpp:parameter"/>
				<element ref="cpp:body"/>
			</sequence>
		</complexType>
	</element>

	<!-- A ctor -->
	<element name="ctor">
		<complexType>
			<sequence>
				<element ref="cpp:id.ref"/>
			</sequence>
		</complexType>
	</element>

	<!-- 
		A type definition 
		
			typedef ... Name;	
	-->
	<element name="typedef">
		<complexType>
			<sequence>
				<element ref="cpp:id.ref"/>
			</sequence>
			<attribute name="id" type="cpp:id"/>
		</complexType>
	</element>

	<!-- An enumeration -->
	<element name="enum">
		<complexType>
			<sequence>
				<element ref="cpp:item" minOccurs="0" maxOccurs="unbounded"/>
			</sequence>
			<attribute name="id" type="cpp:id" use="required"/>
		</complexType>
	</element>

	<!-- An item -->
	<element name="item">
		<complexType>
			<attribute name="id" type="cpp:id" use="required"/>
			<attribute name="value" type="cpp:value" use="required"/>			
		</complexType>
	</element>

	<!--
		A type name contains a name and optional type parameters.

			Name1<Name2, Name3, Name4>
	-->
	<element name="id.ref">
		<complexType>
			<sequence>
				<element ref="cpp:id.ref" minOccurs="0" maxOccurs="unbounded"/>
			</sequence>
			<attribute name="id" type="cpp:id"/>
			<attribute name="type" type="cpp:type"/>
		</complexType>
	</element>

	<!-- A constant. -->
	<element name="const"/>

	<!-- A value type. -->
	<simpleType name="value">
		<restriction base="string"/>
	</simpleType>

	<!-- A type. -->
	<simpleType name="type">
		<restriction base="string">
			<enumeration value="&lt;&gt;"/>
			<enumeration value="::"/>
			<enumeration value="."/>
			<enumeration value="()"/>
			<enumeration value="[]"/>
			<enumeration value="->"/>
			<enumeration value="&amp;"/>
			<enumeration value="const"/>
			<enumeration value="typename"/>
			<enumeration value="declare"/>
			<enumeration value="return"/>
			<enumeration value="this"/>
			<enumeration value="|"/>
			<enumeration value="="/>
		</restriction>
	</simpleType>

	<!-- An id element. -->
	<element name="id">
		<complexType>
			<attribute name="id" type="cpp:id"/>
		</complexType>
	</element>

	<!-- A id type. -->
	<simpleType name="id">
		<restriction base="token"/>
	</simpleType>

</schema>
