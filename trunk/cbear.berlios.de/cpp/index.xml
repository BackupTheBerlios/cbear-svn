<?xml version="1.0"?>
<!--
The MIT License

Copyright (c) 2005 C Bear (http://cbear.berlios.de)

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<?xml-stylesheet type="text/xsl" href="../docbook/html.xsl"?>
<section xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>C++ Unit Structure</title>
	<para>
XML Schema <filename>main.xsd</filename>. Default HTML generator 
<filename>html.xsl</filename>.
	</para>
	<section>
		<title>Examples</title>
		<para>
<filename>examples/empty.cpp.xml</filename>, 
<filename>examples/namespace.cpp.xml</filename>,
<filename>examples/class.cpp.xml</filename>,
<filename>examples/template.cpp.xml</filename>,
<filename>examples/method.cpp.xml</filename>.
		</para>
	</section>
	<section>
		<title>Dreams</title>
		<section>
			<title>Type Of Expression</title>
<programlisting role="cpp"><![CDATA[typedef __typeof__(X + Y) type;]]></programlisting>
		</section>
		<section>
			<title>Auto</title>
<programlisting role="cpp"><![CDATA[__auto__ Z = X + Y;]]></programlisting>
<programlisting role="cpp"><![CDATA[template<class T>
__auto__ minus(T R) { return R - R; }]]></programlisting>
		</section>
		<section>
			<title>Typedef Template</title>
			<para>
Without specialization.
			</para>
<programlisting role="cpp"><![CDATA[template<class A>
typedef first<parents_of<A> > first_parent_of;	
]]></programlisting>
		</section>
		<section>
			<title>Type List</title>
<programlisting role="cpp"><![CDATA[template<class L>
class M;

template<>
class M<std::empty_type_list> {};

template<class Begin>
class M<std::type_list<Begin> > 
{
	typedef Begin first;
};

template<class Begin, class Next>
class M<std::type_list<Begin, Next> >: detail::M<Begin, Next>
{
};

BOOST_STATIC_ASSERT((
	boost::is_same<
		std::type_list<A, std::undefined>, 
		std::type_list<A>::value));

BOOST_STATIC_ASSERT((
	boost::is_same<
		std::type_list<std::undefined, std::undefined>,
		std::empty_list>::value));


typedef M<{A, B, C, D}> MyM;

template<class L>
class Mi;

template<class Begin, class Next>
class Mi<std::type_list<Begin, Next> >: detail::Mi<Begin, Next>
{
};

typedef Mi<{0, 1, 2, 3}> MyMi;

template<class L>
class Mc;

template<class Begin, class Next>
class Mc<std::type_list<Begin, Next> >: detail::Mc<Begin, Next>
{
};

typedef Mc<"Hello world!"> MyMc;

BOOST_STATIC_ASSERT((boost::is_same<
	{0, 1, 2, 3}, std::type_list<std::constant<int, 0>, {1, 2, 3}> >::value);]]></programlisting>
		</section>
		<section>
			<title>Compile Time Type Information</title>
			<section>
				<title>Parents</title>
				<para>
A type list.
				</para>
<programlisting role="cpp"><![CDATA[parents_of<A>]]></programlisting>
			</section>
			<section>
				<title>Members</title>
				<para>
A type list.
				</para>
<programlisting role="cpp"><![CDATA[members_of<A>]]></programlisting>
				<para>
For each member you can apply:
				</para>
<programlisting role="cpp"><![CDATA[member::is_function<Member>
member::is_typedef<Member>
member::is_template<Member>
member::is_static<Member>
member::is_field<Member>

member::name_of<Member>]]></programlisting>
				<para>
and others.
				</para>
			</section>
		</section>
		<section>
			<title>Type Friend</title>
<programlisting role="cpp"><![CDATA[template<class T>
class A
{
private:
	A() {}
	~A() {}
	A(const A &) {}
  A &operator=(const A &) { return *this; }
	__firend__ T;
};

class B: A
{
};]]></programlisting>
		</section>		
		<section>
			<title>Enumeration Base Type</title>
<programlisting role="cpp"><![CDATA[__enum__<unsigned char> color
{
	red,
	green,
	blue,
};]]></programlisting>
		</section>
		<section>
			<title>Lambda Functions</title>
			<para/>
		</section>
		<section>
			<title>Library</title>
<programlisting role="cpp"><![CDATA[template<...>
class basic_string
{
public:
	...
	template<std::size_t Size>
	basic_string(const value_type (&X)[Size]);
	...
};
]]></programlisting>
		</section>
	</section>
</section>
