<?xml version="1.0"?>
<!--
The MIT License

Copyright (c) 2005 C Bear (http://cbear.sourceforge.net)

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<?xml-stylesheet type="text/xsl" href="../docbook/html.xsl"?>
<section>
	<title>Interlocked Variable Access</title>
	<para>
Namespace <emphasis>net::sourceforge::cbear::atomic</emphasis>. 
	</para>
	<para>
Header <filename>main.hpp</filename>.
	</para>
	<section>
		<title>Functions</title>
		<para>
The functions prevent more than one thread from using the same variable 
simultaneously.
		</para>
		<section>
			<title>exchange</title>
			<para>
Performs an atomic exchange a pair of the values.
			</para>
<programlisting role="cpp"><![CDATA[template<class T, class E>
T exchange(volatile T &This, E Exchange);]]></programlisting>
		</section>
		<section>
			<title>compare_exchange</title>
			<para>
Performs an atomic comparison of the values and exchanges them.
			</para>
<programlisting role="cpp"><![CDATA[template<class T, class E, class C>
T compare_exchange(volatile T &This, E Exchange, C Comperand);]]></programlisting>
		</section>
		<section>
			<title>exchange_add</title>
			<para>
Performs an atomic addition of an increment value to a addend value.
			</para>
<programlisting role="cpp"><![CDATA[template<class T, class V>
T exchange_add(volatile T &This, V Value);]]></programlisting>
		</section>
		<section>
			<title>decrement</title>
			<para>
Decrease by one the value and checks the resulting value.
			</para>
<programlisting role="cpp"><![CDATA[template<class T>
T decrement(volatile T &This);]]></programlisting>
		</section>
		<section>
			<title>increment</title>
			<para>
Increase by one the value and checks the resulting value.
			</para>
<programlisting role="cpp"><![CDATA[template<class T>
T increment(volatile T &This);]]></programlisting>
		</section>
		<section>
			<title>read</title>
			<para>
Reads the value.
			</para>
<programlisting role="cpp"><![CDATA[template<class T>
T read(volatile T &);]]></programlisting>
		</section>
	</section>
	<section>
		<title>Wrap</title>
<programlisting role="cpp"><![CDATA[template<class T>
class wrap
{
public:
	T exchange(T Exchange);
	T compare_exchange(T Exchange, T Comperand);
	T exchange_add(T Value);
	T decrement();
	T increment();
	T read();
};]]></programlisting>
	</section>
	<section>
		<title>Static Wrap</title>
<programlisting role="cpp"><![CDATA[template<class Id, class T>
class static_wrap
{
public:
	static T exchange(T Exchange);
	static T compare_exchange(T Exchange, T Comperand);
	static T exchange_add(T Value);
	static T decrement();
	static T increment();
	static T read();
};]]></programlisting>
		<para>
Instead of
		</para>
<programlisting role="cpp"><![CDATA[static wrap<int> A;
...
	A.exchange(N);]]></programlisting>
		<para>
Use
		</para>
<programlisting role="cpp"><![CDATA[class AId;
typedef static_wrap<AId, int> A;
...
	A::exchange(N);]]></programlisting>
	</section>
</section>
