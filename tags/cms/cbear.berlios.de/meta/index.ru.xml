<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../cms/cbear.xsl"?>
<section 
	xmlns="http://cbear.berlios.de/cms"
	xml:lang="ru" 
	name="Метапрограммирование"
	title="Вычисления на этапе компиляции">
	<section name="if_">
		<p>
Файл <a href="if.hpp"/>. Аналоги 
<a href="http://www.boost.org/libs/mpl/doc/refmanual/if.html">boost::mpl::if_</a>
и
<a href="http://www.boost.org/libs/utility/enable_if.html">boost::enable_if</a>.
		</p>
		<section name="Краткое описание">
<pre><![CDATA[template<bool Condition, class Then, class Else = ...>
class if_c;
{
public:

	typedef if_c o;

	// Не определен, если !Condition и не определен Else.
	typedef ... type;

	// Не определен, если определен Else.
	template<bool Condition1, class Then1, class Else1 = ...>
	class else_if_c;

	// Не определен, если определен Else.
	template<class Condition1, class Then1, class Else1 = ...>
	class else_if;
};

template<class Condition, class Then, class Else = ...>
class if_c;]]></pre>
		</section>
		<section name="Сравнение с boost::mpl::if_">
<pre><![CDATA[namespace Mpl = boost::mpl;
namespace Meta = cbear_berlios_de::meta;]]></pre>
		<ul>
			<li>
Если C::value == true то X это T, иначе X это E.				
<pre><![CDATA[// Boost
typedef Mpl::if_<C, T, E>::type X;

// C Bear
typedef Meta::if_<C, T, E>::type X;]]></pre>
			</li>
			<li>
<![CDATA[Шаблон с пятью условиями.]]>
<pre><![CDATA[// Boost
template<class C1, class C2, class C3, class C4, class C5>
struct X: 
	Mpl::if_<C1, T1, 
	typename Mpl::if_<C2, T2, 
	typename Mpl::if_<C3, T3, 
	typename Mpl::if_<C4, T4, 
	typename Mpl::if_<C5, T5, 
	E
	>::type 
	>::type 
	>::type 
	>::type 
	>
{
};

// C Bear
template<class C1, class C2, class C3, class C4, class C5>
struct X:
	Meta::if_<C1, T1>::
	template else_if<C2, T2>::
	template else_if<C3, T3>::
	template else_if<C4, T4>::
	template else_if<C5, T5>::	
	template else_<E>
{
};

// C Bear на VC 8.0
template<class C1, class C2, class C3, class C4, class C5>
struct X:
	Meta::if_<C1, T1>::
	template else_if<C2, T2>::o::
	template else_if<C3, T3>::o::
	template else_if<C4, T4>::o::
	template else_if<C5, T5>::o::	
	template else_<E>
{
};]]></pre>
				</li>						
			</ul>
		</section>
		<section name="Сравнение с boost::enable_if">
<pre><![CDATA[namespace Mpl = boost::mpl;
namespace Meta = cbear_berlios_de::meta;]]></pre>
			<ul>
				<li>
Только если T арифметический тип.
<pre><![CDATA[// Boost
template<class T>
T foo(T t, typename boost::enable_if<boost::is_arithmetic<T> >::type* dummy = 0);

// C Bear
template<class T>
T foo(T t, typename Meta::if_<boost::is_arithmetic<T> >::type* dummy = 0);]]></pre>
				</li>
				<li>
Только если T целый тип (при этом возвращать T), или если T указатель (при этом 
возвращать int).
<pre><![CDATA[// Boost
template<class T>
typename lazy_enable_if<
	Mpl::or_<boost::is_integral<T>, boost::is_pointer<T> >, 
	Mpl::if_<boost::is_integral<T>, T, int> >::type
foo(T t);

// C Bear
template<class T>
typename Meta::if_<boost::is_integral<T>, T>::
template else_if<boost::is_pointer<T>, int>::type
foo(T t);]]></pre>
				</li>
			</ul>
		</section>
	</section>
</section>
