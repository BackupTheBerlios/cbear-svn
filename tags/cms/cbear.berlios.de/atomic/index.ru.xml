<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../cms/cbear.xsl"?>
<section 
	xmlns="http://cbear.berlios.de/cms" 
	xml:lang="ru" 
	name="Атомарный доступ">
	<p>
Пространство имен <em>cbear_berlios_de::atomic</em>.
	</p>
	<p>
Заголовочный файл <a href="main.hpp"/>.
	</p>
	<section name="Functions">
Данные функции предотвращают использование одной и той же переменной
в нескольких потоках одновременно.
		<section name="exchange">
Атомарный обмен значениями.
<pre><![CDATA[template<class T, class E>
T exchange(volatile T &This, E Exchange);]]></pre>
		</section>
		<section name="compare_exchange">
Атомарное сравнение и обмен значениями.
<pre><![CDATA[template<class T, class E, class C>
T compare_exchange(volatile T &This, E Exchange, C Comperand);]]></pre>
		</section>
		<section name="exchange_add">
Атомарное увеличение значения переменной.
<pre><![CDATA[template<class T, class V>
T exchange_add(volatile T &This, V Value);]]></pre>
		</section>
		<section name="decrement">
Атомарное уменьшение значения переменной на единицу.
<pre><![CDATA[template<class T>
T decrement(volatile T &This);]]></pre>
		</section>
		<section name="increment">
Атомарное увеличение значения переменной на единицу.
<pre><![CDATA[template<class T>
T increment(volatile T &This);]]></pre>
		</section>
		<section name="read">
Атомарное чтение.
<pre><![CDATA[template<class T>
T read(volatile T &);]]></pre>
		</section>
	</section>
	<section name="Оболочка">
<pre><![CDATA[template<class T>
class wrap
{
public:
	T exchange(T Exchange);
	T compare_exchange(T Exchange, T Comperand);
	T exchange_add(T Value);
	T decrement();
	T increment();
	T read();
};]]></pre>
	</section>
	<section name="Статическая оболочка">
<pre>template&lt;class Id, class T&gt;
class static_wrap
{
public:
	static T exchange(T Exchange);
	static T compare_exchange(T Exchange, T Comperand);
	static T exchange_add(T Value);
	static T decrement();
	static T increment();
	static T read();
};</pre>
Вместо
<pre>static wrap&lt;int&gt; A;
...
A.exchange(N);</pre>
используйте
<pre>class AId;
typedef static_wrap&lt;AId, int&gt; A;
...
A::exchange(N);</pre>
	</section>
</section>