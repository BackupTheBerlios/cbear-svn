<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../cms/cbear.xsl"?>
<section xmlns="http://cbear.berlios.de/cms" xml:lang="ru" name="Базовые типы">
	<p>
Пространство имен <em>cbear_berlios_de::base</em>.
	</p>
	<section name="Целочисленные типы">
		
		<p>
Заголовочный файл <a href="integer.hpp"/>. Тестирующая программа
<a href="integer.hpp.test.cpp"/>.
		</p>
		<section name="is_integer метафункция">			
			<p>
Возвращает <em>true</em> если данный тип целочисленный.
			</p>
<pre>template&lt;class Type&gt; 
struct is_integer
{ 
	typedef ... type;
	static const bool value;
};</pre>
		</section>
		<section name="is_signed метафункция">			
			<p>
Возвращает <em>true</em> если данный тип имеет знак.
			</p>
<pre>template&lt;class Type&gt;
struct is_signed
{
	typedef ... type;
	static const bool value;
};</pre>
		</section>
		<section name="Задание целочисленного типа (int_t, uint_t)">			
			<p>
Данные метафункции базируються на <a href=
"http://www.boost.org/libs/integer/integer.htm"
>Boost, Integer Type Selection Templates</a>.
			</p>
			<p>
Метафунция <em>int_t</em> возвращает встроенный знаковый целочисленный тип с 
заданным количеством бит.
			</p>
<pre>template&lt;std::size_t Bits&gt;
struct int_t
{
	typedef ... type;
};</pre>
			<p>
Метафункция <em>uint_t</em> возвращает встроенный беззнаковый целочисленный тип с 
заданным количеством бит.
			</p>
<pre>template&lt;std::size_t Bits&gt;
struct uint_t
{
	typedef ... type;
};</pre>
			<p>
См. также <a href="http://www.boost.org/libs/integer/integer.htm"
>Boost, Integer Type Selection Templates</a> и <a href=
"http://www.boost.org/libs/integer/cstdint.htm">Boost, Header boost/cstdint.hpp</a>.
			</p>
		</section>
		<section name="Преобразования (make_signed, make_unsigned)">			
			<p>
Метафункция <em>make_signed</em> возвращает встроенный знаковый целочисленный 
тип, с тем же количеством бит, включая знаковый, что и данный.
			</p>
<pre>template&lt;class Type&gt;
struct make_signed
{
	typedef ... type;
};</pre>
			<p>
Метафункция <em>make_unsigned</em> возвращает встроенный беззнаковый 
целочисленный тип, c тем же количеством бит, что и данный, включая знаковый.
			</p>
<pre>template&lt;class Type&gt;
struct make_unsigned
{
	typedef ... type;
};</pre>
		</section>
		<section name="Части целочисленных типов">			
<pre>template&lt;class Type&gt;
struct half
{
	typedef ... type;
}

template&lt;class Type&gt;
typename half&lt;Type&gt;::type &amp;low(Type &amp;X);

template&lt;class Type&gt;
typename half&lt;Type&gt;::type low(const Type &amp;X);

template&lt;class Type&gt;
typename half&lt;Type&gt;::type &amp;high(Type &amp;X);

template&lt;class Type&gt;
typename half&lt;Type&gt;::type high(const Type &amp;X);

template&lt;class Half&gt;
struct compose_result
{
	typedef ... type;
};

template&lt;class Half&gt;
typename compose_result&lt;Half&gt;::type compose(const Half &amp;High, const Half &amp;Low);</pre>
		</section>
	</section>
	<section name="Синглетон">
		<p>
<a href="singleton.hpp"/>.
		</p>
		<section name="Требования">		
Потокобезопасность, используя <em>thread::static_mutex</em> или
<em>atomic::static_wrap</em>.
		</section>
	</section>
</section>