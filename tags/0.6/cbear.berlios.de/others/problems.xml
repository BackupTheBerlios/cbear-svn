<?xml version="1.0" encoding="utf-8"?>
<!--
The MIT License

Copyright (c) 2005 C Bear (http://cbear.berlios.de)

Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<?xml-stylesheet type="text/xsl" href="../project/html.xsl"?>
<section 
	xmlns="http://cbear.berlios.de/project" name="Problems">
	<section name="Specialization Of Nested Templates">
<pre><![CDATA[struct A
{
	template<class T>
	class B;
	// GCC - Error.
	template<>
	class B<void> {};
};]]></pre>
Workaround:
<pre><![CDATA[struct A
{
	template<class T, class = void>
	class B;
	template<class D>
	class B<void, D> {};
};]]></pre>
	</section>
	<section name="or, and, not">
<pre><![CDATA[class or; // GCC - error.
class and; // GCC - error.
class not; // GCC - error.]]></pre>
Workaround:
<pre><![CDATA[class or_;
class and_;
class not_;]]></pre>
	</section>
	<section name="Nested Class Access">
<pre><![CDATA[class A
{
	class B
	{
	public:
		B(A a) 
		{ 
			a.c; // DMC - error.
		}
	};
private:
	int c;
};]]></pre>
Workaround:
<pre><![CDATA[class A
{
	class B
	{
	public:
		B(A a) 
		{ 
			a.c;
		}
	};
	friend class B;
private:
	int c;
};]]></pre>
	</section>
	<section name="Default Template Value">
<pre><![CDATA[template<class A>
class B
{
public:
	static const int value = 0;
};
// DMC - error.
template<class A, int D = B<A>::value>
class C
{
};]]></pre>
	</section>
	<section name="Unknown Size">
<pre><![CDATA[template<class T>
class A
{
public:
  friend T D()
	// DMC - error.
  {
    return T();
  }
};

class B: public A<B>
{
};]]></pre>
	</section>
	<section name="RValue">
<pre><![CDATA[template<class T>
void F(T &) {}
template<class T>
void F(const T &) {}
int main()
{
	F(5); // DMC - error.
}]]></pre>
	</section>
	<section name="Ambiguous Call">
<pre><![CDATA[template<class C, class T>
void A(T &)
{
}
template<class C, class T>
void A(const T &)
{
}
int main()
{
	const int X = 5;
	A<int>(X); // GCC, DMC - error.
}]]></pre>
	</section>
	<section name="Array Reference, DMC">
<pre><![CDATA[template<class M, int S>
void CAR(const M (&X)[S])
{
}

template<class T>
void CR(const T &X)
{
	CAR(X);
}

template<class M, int S>
void AR(M (&X)[S])
{
}

template<class M, int S>
void R(M &X)
{
	AR(X);
}

template<class M, int S>
void OAR(const M (&X)[S])
{
}

template<class M, int S>
void OAR(M (&X)[S])
{
}

template<class M>
void OR(const M &X)
{
	OAR(X);
}

template<class M>
void OR(M &X)
{
	OAR(X);
}

template<class M, int S>
void O(const M (&X)[S])
{
}

template<class M, int S>
void O(M (&X)[S])
{
}

template<class M>
void O(const M &X)
{
	OAR(X);
}

int main()
{
	const char CC[] = "Hello world!";
	char MC[] = "Hello world!";

	const int CI[] = { 0, 1, 2 };
	int MI[] = { 0, 1, 2 };

	const wchar_t CW[] = L"Hello world!";
	wchar_t MW[] = L"Hello world!";

	/// Const Array Reference.

	CAR(CC);
	// CAR(MC); // error
	// CAR("Hello world!"); // error

	CAR(CI);
	// CAR(MI); // error

	CAR(CW);
	// CAR(MW); // error
	// CAR(L"Hello world!"); // error

	/// Const Reference.

	CR(CC);
	// CR(MC); // error
	// CR("Hello world!"); // incorrect size

	CR(CI);
	// CR(MI); // error

	CR(CW);
	// CR(MC); // error
	// CR(L"Hello world!"); // incorrect size

	/// Array Reference.

	AR(MC);

	AR(MI);

	AR(MW);

	/// Reference.

	// R(MC); // error
	// R(MI); // error
	// R(MW); // error

	/// Overloaded Array Reference.

	OAR(CC);
	OAR(MC);
	// OAR("Hello world!"); // error

	OAR(CI);
	OAR(MI);

	OAR(CW);
	OAR(MW);
	// OAR(L"Hello world!"); // error

	/// Overloaded Reference.

	// OR(CC); // error
	// OR(MC); // error
	// OR("Hello world!"); // error

	// OR(CI); // error
	// OR(MI); // error

	// OR(CW); // error
	// OR(MW); // error
	// OR(L"Hello world!");

	/// Overloaded.

	O(CC);
	O(MC);
	// O("Hello world!"); // error

	O(CI);
	O(MI);

	O(CW);
	O(MW);
	// O(L"Hello world!"); // error
}]]></pre>
	</section>
	<section name="Batch File, goto">
<pre><![CDATA[goto A123456789_123456789_123456789_123456789_123456789_123456789_123456789_123456789_123456789_123456789_123456789_123456789_1234567
:A123456789_123456789_123456789_123456789_123456789_123456789_123456789_123456789_123456789_123456789_123456789_123456789_1234567]]></pre>
	</section>
</section>
