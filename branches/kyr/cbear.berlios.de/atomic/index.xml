<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../cms/html.xsl"?>
<section 
	xmlns="http://cbear.berlios.de/cms" name="Interlocked Variable Access">
	
	<p>
Namespace <em>cbear_berlios_de::atomic</em>. 
	</p>
	<p>
Header <a href="main.hpp"/>.
	</p>
	<section name="Functions">		
		<p>
The functions prevent more than one thread from using the same variable 
simultaneously.
		</p>
		<section name="exchange">			
			<p>
Performs an atomic exchange a pair of the values.
			</p>
<pre>template&lt;class T, class E&gt;
T exchange(volatile T &amp;This, E Exchange);</pre>
		</section>
		<section name="compare_exchange">			
			<p>
Performs an atomic comparison of the values and exchanges them.
			</p>
<pre>template&lt;class T, class E, class C&gt;
T compare_exchange(volatile T &amp;This, E Exchange, C Comperand);</pre>
		</section>
		<section name="exchange_add">			
			<p>
Performs an atomic addition of an increment value to an added value.
			</p>
<pre>template&lt;class T, class V&gt;
T exchange_add(volatile T &amp;This, V Value);</pre>
		</section>
		<section name="decrement">			
			<p>
Decrease by one the value and checks the resulting value.
			</p>
<pre>template&lt;class T&gt;
T decrement(volatile T &amp;This);</pre>
		</section>
		<section name="increment">			
			<p>
Increase by one the value and checks the resulting value.
			</p>
<pre>template&lt;class T&gt;
T increment(volatile T &amp;This);</pre>
		</section>
		<section name="read">
			<p>
Reads the value.
			</p>
<pre>template&lt;class T&gt;
T read(volatile T &amp;);</pre>
		</section>
	</section>
	<section name="Wrap">		
<pre>template&lt;class T&gt;
class wrap
{
public:
	T exchange(T Exchange);
	T compare_exchange(T Exchange, T Comperand);
	T exchange_add(T Value);
	T decrement();
	T increment();
	T read();
};</pre>
	</section>
	<section name="Static Wrap">		
<pre>template&lt;class Id, class T&gt;
class static_wrap
{
public:
	static T exchange(T Exchange);
	static T compare_exchange(T Exchange, T Comperand);
	static T exchange_add(T Value);
	static T decrement();
	static T increment();
	static T read();
};</pre>
		<p>
Instead of
		</p>
<pre>static wrap&lt;int&gt; A;
...
	A.exchange(N);</pre>
		<p>
Use
		</p>
<pre>class AId;
typedef static_wrap&lt;AId, int&gt; A;
...
	A::exchange(N);</pre>
	</section>
</section>